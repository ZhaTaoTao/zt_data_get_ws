# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fixposition_driver_ros1/gpvtg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gpvtg(genpy.Message):
  _md5sum = "a44dc6b882f07ff5b8c222767876cea2"
  _type = "fixposition_driver_ros1/gpvtg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """####################################################################################################
#
#    Copyright (c) 2023  ___     ___
#                       \\  \\  /  /
#                        \\  \\/  /
#                         /  /\\  \\
#                        /__/  \\__\\  Fixposition AG
#
####################################################################################################
#
# Fixposition NMEA-GP-VTG Message
#
#
####################################################################################################

# Format | Field      | Unit    | Description
# -------|------------|---------|--------------------------------------------------------|
float64    cog_true   # [deg]   | Course over ground wrt. True North.
char       cog_ref_t  # [-]     | COG reference, always T (true).
float64    cog_mag    # [-]     | Course over ground w.r.t. Magnetic North, always null.
char       cog_ref_m  # [-]     | COG reference, always M (magnetic).
float64    sog_knot   # [knots] | Speed over ground in knots.
char       sog_unit_n # [-]     | SOG reference, always N (knots).
float64    sog_kph    # [km/h]  | Speed over ground in km/h.
char       sog_unit_k # [-]     | SOG reference, always K (km/h).
char       mode       # [-]     | Positioning system mode indicator (see below).

# Mode table
#
# | ID | Signal                |
# |----|-----------------------|
# |  N | Data not valid        |
# |  E | Dead-reckoning        |
# |  D | Differential          |
# |  A | Autonomous            |
# |  M | Manual input not used |
# |  S | Simulator not used    |
"""
  __slots__ = ['cog_true','cog_ref_t','cog_mag','cog_ref_m','sog_knot','sog_unit_n','sog_kph','sog_unit_k','mode']
  _slot_types = ['float64','char','float64','char','float64','char','float64','char','char']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cog_true,cog_ref_t,cog_mag,cog_ref_m,sog_knot,sog_unit_n,sog_kph,sog_unit_k,mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gpvtg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cog_true is None:
        self.cog_true = 0.
      if self.cog_ref_t is None:
        self.cog_ref_t = 0
      if self.cog_mag is None:
        self.cog_mag = 0.
      if self.cog_ref_m is None:
        self.cog_ref_m = 0
      if self.sog_knot is None:
        self.sog_knot = 0.
      if self.sog_unit_n is None:
        self.sog_unit_n = 0
      if self.sog_kph is None:
        self.sog_kph = 0.
      if self.sog_unit_k is None:
        self.sog_unit_k = 0
      if self.mode is None:
        self.mode = 0
    else:
      self.cog_true = 0.
      self.cog_ref_t = 0
      self.cog_mag = 0.
      self.cog_ref_m = 0
      self.sog_knot = 0.
      self.sog_unit_n = 0
      self.sog_kph = 0.
      self.sog_unit_k = 0
      self.mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dBdBdBd2B().pack(_x.cog_true, _x.cog_ref_t, _x.cog_mag, _x.cog_ref_m, _x.sog_knot, _x.sog_unit_n, _x.sog_kph, _x.sog_unit_k, _x.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.cog_true, _x.cog_ref_t, _x.cog_mag, _x.cog_ref_m, _x.sog_knot, _x.sog_unit_n, _x.sog_kph, _x.sog_unit_k, _x.mode,) = _get_struct_dBdBdBd2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dBdBdBd2B().pack(_x.cog_true, _x.cog_ref_t, _x.cog_mag, _x.cog_ref_m, _x.sog_knot, _x.sog_unit_n, _x.sog_kph, _x.sog_unit_k, _x.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.cog_true, _x.cog_ref_t, _x.cog_mag, _x.cog_ref_m, _x.sog_knot, _x.sog_unit_n, _x.sog_kph, _x.sog_unit_k, _x.mode,) = _get_struct_dBdBdBd2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dBdBdBd2B = None
def _get_struct_dBdBdBd2B():
    global _struct_dBdBdBd2B
    if _struct_dBdBdBd2B is None:
        _struct_dBdBdBd2B = struct.Struct("<dBdBdBd2B")
    return _struct_dBdBdBd2B
