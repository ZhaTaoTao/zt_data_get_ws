# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fixposition_driver_ros1/tp.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class tp(genpy.Message):
  _md5sum = "fb47e0dd4a2fae13d470d2c34ba242f0"
  _type = "fixposition_driver_ros1/tp"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """####################################################################################################
#
#    Copyright (c) 2023  ___     ___
#                       \\  \\  /  /
#                        \\  \\/  /
#                         /  /\\  \\
#                        /__/  \\__\\  Fixposition AG
#
####################################################################################################
#
# Fixposition FP_A-TP Message
#
#
####################################################################################################

string  tp_name                              # Timepulse name (source)
string  timebase                             # Time base (see below), or null if not available
string  timeref                              # Time reference (see below), or null if not available
int64   tp_tow_sec                           # Timepulse time seconds of week, integer second part (0–604799), or null
float64 tp_tow_psec                          # Timepulse time seconds of week, sub-second part (0.000000000000–0.999999999999), or null
int64   gps_leaps                            # GPS leapseconds, or null if unknown


# Values for timebase
#
# | Value | Description               |
# |-------|---------------------------|
# |  null | No timepulse alignment    |
# |  GNSS | Timepulse aligned to GNSS |
# |   UTC | Timepulse aligned to UTC  |


# Values for timeref if timebase is GNSS
#
# | Value | Description                     |
# |-------|---------------------------------|
# |   GPS | Timepulse aligned to GPS        |
# |   GAL | Timepulse aligned to Galileo    |
# |   BDS | Timepulse aligned to BeiDou     |
# |   GLO | Timepulse aligned to GLONASS    |
# | OTHER | Timepulse aligned to other GNSS |


# Values for timeref if timebase is UTC
#
# | Value | Description                                                                |
# |-------|----------------------------------------------------------------------------|
# |  NONE | Timepulse aligned to no UTC (no precise UTC parameters known yet)          |
# |   CRL | Timepulse aligned to Communications Research Laboratory (CRL), Japan       |
# |  NIST | Timepulse aligned to National Institute of Standards and Technology (NIST) |
# |  USNO | Timepulse aligned to U.S. Naval Observatory (USNO)                         |
# |  BIPM | Timepulse aligned to International Bureau of Weights and Measures (BIPM)   |
# |    EU | Timepulse aligned to European laboratories                                 |
# |    SU | Timepulse aligned to Former Soviet Union (SU)                              |
# |  NTSC | Timepulse aligned to National Time Service Center (NTSC), China            |
# | OTHER | Timepulse aligned to other/unknown UTC                                     |
"""
  __slots__ = ['tp_name','timebase','timeref','tp_tow_sec','tp_tow_psec','gps_leaps']
  _slot_types = ['string','string','string','int64','float64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tp_name,timebase,timeref,tp_tow_sec,tp_tow_psec,gps_leaps

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(tp, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tp_name is None:
        self.tp_name = ''
      if self.timebase is None:
        self.timebase = ''
      if self.timeref is None:
        self.timeref = ''
      if self.tp_tow_sec is None:
        self.tp_tow_sec = 0
      if self.tp_tow_psec is None:
        self.tp_tow_psec = 0.
      if self.gps_leaps is None:
        self.gps_leaps = 0
    else:
      self.tp_name = ''
      self.timebase = ''
      self.timeref = ''
      self.tp_tow_sec = 0
      self.tp_tow_psec = 0.
      self.gps_leaps = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.tp_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timebase
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timeref
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qdq().pack(_x.tp_tow_sec, _x.tp_tow_psec, _x.gps_leaps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tp_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tp_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timebase = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timebase = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeref = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timeref = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.tp_tow_sec, _x.tp_tow_psec, _x.gps_leaps,) = _get_struct_qdq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.tp_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timebase
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timeref
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qdq().pack(_x.tp_tow_sec, _x.tp_tow_psec, _x.gps_leaps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tp_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tp_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timebase = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timebase = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeref = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timeref = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.tp_tow_sec, _x.tp_tow_psec, _x.gps_leaps,) = _get_struct_qdq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_qdq = None
def _get_struct_qdq():
    global _struct_qdq
    if _struct_qdq is None:
        _struct_qdq = struct.Struct("<qdq")
    return _struct_qdq
