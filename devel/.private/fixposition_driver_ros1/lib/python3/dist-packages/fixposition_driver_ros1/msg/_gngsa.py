# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fixposition_driver_ros1/gngsa.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gngsa(genpy.Message):
  _md5sum = "8e04c2fa8cea888c64fc400d41a1a650"
  _type = "fixposition_driver_ros1/gngsa"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """####################################################################################################
#
#    Copyright (c) 2023  ___     ___
#                       \\  \\  /  /
#                        \\  \\/  /
#                         /  /\\  \\
#                        /__/  \\__\\  Fixposition AG
#
####################################################################################################
#
# Fixposition NMEA-GN-GSA Message
#
#
####################################################################################################

# Format | Field    | Unit | Description
# -------|----------|------|----------------------------------------------------------------------------------------------|
char       mode_op  #  [-] | Operation mode: always A (automatic, allowed to automatically switch 2D/3D).
int8       mode_nav #  [-] | Navigation mode: 1 (fix not available), 2 (2D) or 3 (3D).
int8[]     ids      #  [-] | ID numbers of satellites used in solution. See the NMEA 0183 version 4.11 standard document.
float64    pdop     #  [-] | Position dillution of precision.
float64    hdop     #  [-] | Horizontal dillution of precision.
float64    vdop     #  [-] | Vertical dillution of precision.
int8       gnss_id  #  [-] | GNSS system ID: 1 (GPS, SBAS), 2 (GLONASS), 3 (Galileo), 4 (BeiDou), 5 (QZSS).
"""
  __slots__ = ['mode_op','mode_nav','ids','pdop','hdop','vdop','gnss_id']
  _slot_types = ['char','int8','int8[]','float64','float64','float64','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode_op,mode_nav,ids,pdop,hdop,vdop,gnss_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gngsa, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mode_op is None:
        self.mode_op = 0
      if self.mode_nav is None:
        self.mode_nav = 0
      if self.ids is None:
        self.ids = []
      if self.pdop is None:
        self.pdop = 0.
      if self.hdop is None:
        self.hdop = 0.
      if self.vdop is None:
        self.vdop = 0.
      if self.gnss_id is None:
        self.gnss_id = 0
    else:
      self.mode_op = 0
      self.mode_nav = 0
      self.ids = []
      self.pdop = 0.
      self.hdop = 0.
      self.vdop = 0.
      self.gnss_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bb().pack(_x.mode_op, _x.mode_nav))
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.ids))
      _x = self
      buff.write(_get_struct_3db().pack(_x.pdop, _x.hdop, _x.vdop, _x.gnss_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.mode_op, _x.mode_nav,) = _get_struct_Bb().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ids = s.unpack(str[start:end])
      _x = self
      start = end
      end += 25
      (_x.pdop, _x.hdop, _x.vdop, _x.gnss_id,) = _get_struct_3db().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bb().pack(_x.mode_op, _x.mode_nav))
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.ids.tostring())
      _x = self
      buff.write(_get_struct_3db().pack(_x.pdop, _x.hdop, _x.vdop, _x.gnss_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.mode_op, _x.mode_nav,) = _get_struct_Bb().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ids = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 25
      (_x.pdop, _x.hdop, _x.vdop, _x.gnss_id,) = _get_struct_3db().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3db = None
def _get_struct_3db():
    global _struct_3db
    if _struct_3db is None:
        _struct_3db = struct.Struct("<3db")
    return _struct_3db
_struct_Bb = None
def _get_struct_Bb():
    global _struct_Bb
    if _struct_Bb is None:
        _struct_Bb = struct.Struct("<Bb")
    return _struct_Bb
