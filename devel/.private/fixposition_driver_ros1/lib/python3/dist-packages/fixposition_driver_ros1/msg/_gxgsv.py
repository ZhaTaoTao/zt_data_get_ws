# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fixposition_driver_ros1/gxgsv.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gxgsv(genpy.Message):
  _md5sum = "6c19e5f5ab3c6892027710db5940fb01"
  _type = "fixposition_driver_ros1/gxgsv"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """####################################################################################################
#
#    Copyright (c) 2023  ___     ___
#                       \\  \\  /  /
#                        \\  \\/  /
#                         /  /\\  \\
#                        /__/  \\__\\  Fixposition AG
#
####################################################################################################
#
# Fixposition NMEA-GX-GSV Message
#
#
####################################################################################################

# Format | Field     | Unit    | Description
# -------|-----------|---------|-------------------------------------|
int16      sentences # [-]     | Total number of sentences (1 to 9).
int16      sent_num  # [-]     | Sentence number (1 to 9).
int32      num_sats  # [-]     | Total number of satellites in view.
int16[]    sat_id    # [-]     | Satellite ID number.               
int16[]    elev      # [deg]   | Satellite elevation. 
int16[]    azim      # [deg]   | Satellite azimuth from true North.
int16[]    cno       # [db-Hz] | Satellite SNR (C/No).
string     signal_id # [Hex]   | Signal ID (see below).

# Signal ID table
#
# | ID | Signal                        |
# |----|-------------------------------|
# |  0 | No signal (any talker ID)     |
# |  1 | GPS/SBAS L1C/A (talker ID GP) |
# |  6 | GPS L2C-L (talker ID GP)      |
# |  7 | Galileo L1-BC (talker ID GA)  |
# |  2 | Galileo E5b (talker ID GA)    |
# |  1 | BeiDou B1I (talker ID GB)     |
# |  B | BeiDou B2I (talker ID GB)     |
# |  1 | GLONASS G1 C/A (talker ID GL) |
# |  3 | GLONASS G2 C/A (talker ID GL) |"""
  __slots__ = ['sentences','sent_num','num_sats','sat_id','elev','azim','cno','signal_id']
  _slot_types = ['int16','int16','int32','int16[]','int16[]','int16[]','int16[]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sentences,sent_num,num_sats,sat_id,elev,azim,cno,signal_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gxgsv, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sentences is None:
        self.sentences = 0
      if self.sent_num is None:
        self.sent_num = 0
      if self.num_sats is None:
        self.num_sats = 0
      if self.sat_id is None:
        self.sat_id = []
      if self.elev is None:
        self.elev = []
      if self.azim is None:
        self.azim = []
      if self.cno is None:
        self.cno = []
      if self.signal_id is None:
        self.signal_id = ''
    else:
      self.sentences = 0
      self.sent_num = 0
      self.num_sats = 0
      self.sat_id = []
      self.elev = []
      self.azim = []
      self.cno = []
      self.signal_id = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2hi().pack(_x.sentences, _x.sent_num, _x.num_sats))
      length = len(self.sat_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.sat_id))
      length = len(self.elev)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.elev))
      length = len(self.azim)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.azim))
      length = len(self.cno)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.cno))
      _x = self.signal_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.sentences, _x.sent_num, _x.num_sats,) = _get_struct_2hi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sat_id = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.elev = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.azim = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cno = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.signal_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.signal_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2hi().pack(_x.sentences, _x.sent_num, _x.num_sats))
      length = len(self.sat_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.sat_id.tostring())
      length = len(self.elev)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.elev.tostring())
      length = len(self.azim)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.azim.tostring())
      length = len(self.cno)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.cno.tostring())
      _x = self.signal_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.sentences, _x.sent_num, _x.num_sats,) = _get_struct_2hi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sat_id = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.elev = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.azim = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cno = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.signal_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.signal_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2hi = None
def _get_struct_2hi():
    global _struct_2hi
    if _struct_2hi is None:
        _struct_2hi = struct.Struct("<2hi")
    return _struct_2hi
