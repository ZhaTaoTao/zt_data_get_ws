# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fixposition_driver_ros1/gnsscorr.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class gnsscorr(genpy.Message):
  _md5sum = "b77ad2e5b59b9f0261c4a7de8a44a073"
  _type = "fixposition_driver_ros1/gnsscorr"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """####################################################################################################
#
#    Copyright (c) 2023  ___     ___
#                       \\  \\  /  /
#                        \\  \\/  /
#                         /  /\\  \\
#                        /__/  \\__\\  Fixposition AG
#
####################################################################################################
#
# Fixposition FP_A-GNSSCORR Message
#
#
####################################################################################################

Header header
int16 gnss1_fix          # GNSS1 fix status
int16 gnss1_nsig_l1      # Number of L1 signals with correction data tracked by GNSS1
int16 gnss1_nsig_l2      # Number of L2 signals with correction data tracked by GNSS1
int16 gnss2_fix          # GNSS2 fix status
int16 gnss2_nsig_l1      # Number of L1 signals with correction data tracked by GNSS2
int16 gnss2_nsig_l2      # Number of L2 signals with correction data tracked by GNSS2

float64 corr_latency       # Average correction data latency (10s window)
float64 corr_update_rate   # Average correction update rate (10s window)
float64 corr_data_rate     # Average correction data rate (10s window)
float64 corr_msg_rate      # Average correction message rate (10s window)

int16 sta_id                    # Correction station ID, range 0â€“4095
geometry_msgs/Vector3 sta_llh   # Correction station LLH position (latitude, longitude, height)
int32 sta_dist                  # Correction station baseline length

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','gnss1_fix','gnss1_nsig_l1','gnss1_nsig_l2','gnss2_fix','gnss2_nsig_l1','gnss2_nsig_l2','corr_latency','corr_update_rate','corr_data_rate','corr_msg_rate','sta_id','sta_llh','sta_dist']
  _slot_types = ['std_msgs/Header','int16','int16','int16','int16','int16','int16','float64','float64','float64','float64','int16','geometry_msgs/Vector3','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,gnss1_fix,gnss1_nsig_l1,gnss1_nsig_l2,gnss2_fix,gnss2_nsig_l1,gnss2_nsig_l2,corr_latency,corr_update_rate,corr_data_rate,corr_msg_rate,sta_id,sta_llh,sta_dist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gnsscorr, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gnss1_fix is None:
        self.gnss1_fix = 0
      if self.gnss1_nsig_l1 is None:
        self.gnss1_nsig_l1 = 0
      if self.gnss1_nsig_l2 is None:
        self.gnss1_nsig_l2 = 0
      if self.gnss2_fix is None:
        self.gnss2_fix = 0
      if self.gnss2_nsig_l1 is None:
        self.gnss2_nsig_l1 = 0
      if self.gnss2_nsig_l2 is None:
        self.gnss2_nsig_l2 = 0
      if self.corr_latency is None:
        self.corr_latency = 0.
      if self.corr_update_rate is None:
        self.corr_update_rate = 0.
      if self.corr_data_rate is None:
        self.corr_data_rate = 0.
      if self.corr_msg_rate is None:
        self.corr_msg_rate = 0.
      if self.sta_id is None:
        self.sta_id = 0
      if self.sta_llh is None:
        self.sta_llh = geometry_msgs.msg.Vector3()
      if self.sta_dist is None:
        self.sta_dist = 0
    else:
      self.header = std_msgs.msg.Header()
      self.gnss1_fix = 0
      self.gnss1_nsig_l1 = 0
      self.gnss1_nsig_l2 = 0
      self.gnss2_fix = 0
      self.gnss2_nsig_l1 = 0
      self.gnss2_nsig_l2 = 0
      self.corr_latency = 0.
      self.corr_update_rate = 0.
      self.corr_data_rate = 0.
      self.corr_msg_rate = 0.
      self.sta_id = 0
      self.sta_llh = geometry_msgs.msg.Vector3()
      self.sta_dist = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6h4dh3di().pack(_x.gnss1_fix, _x.gnss1_nsig_l1, _x.gnss1_nsig_l2, _x.gnss2_fix, _x.gnss2_nsig_l1, _x.gnss2_nsig_l2, _x.corr_latency, _x.corr_update_rate, _x.corr_data_rate, _x.corr_msg_rate, _x.sta_id, _x.sta_llh.x, _x.sta_llh.y, _x.sta_llh.z, _x.sta_dist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sta_llh is None:
        self.sta_llh = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 74
      (_x.gnss1_fix, _x.gnss1_nsig_l1, _x.gnss1_nsig_l2, _x.gnss2_fix, _x.gnss2_nsig_l1, _x.gnss2_nsig_l2, _x.corr_latency, _x.corr_update_rate, _x.corr_data_rate, _x.corr_msg_rate, _x.sta_id, _x.sta_llh.x, _x.sta_llh.y, _x.sta_llh.z, _x.sta_dist,) = _get_struct_6h4dh3di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6h4dh3di().pack(_x.gnss1_fix, _x.gnss1_nsig_l1, _x.gnss1_nsig_l2, _x.gnss2_fix, _x.gnss2_nsig_l1, _x.gnss2_nsig_l2, _x.corr_latency, _x.corr_update_rate, _x.corr_data_rate, _x.corr_msg_rate, _x.sta_id, _x.sta_llh.x, _x.sta_llh.y, _x.sta_llh.z, _x.sta_dist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sta_llh is None:
        self.sta_llh = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 74
      (_x.gnss1_fix, _x.gnss1_nsig_l1, _x.gnss1_nsig_l2, _x.gnss2_fix, _x.gnss2_nsig_l1, _x.gnss2_nsig_l2, _x.corr_latency, _x.corr_update_rate, _x.corr_data_rate, _x.corr_msg_rate, _x.sta_id, _x.sta_llh.x, _x.sta_llh.y, _x.sta_llh.z, _x.sta_dist,) = _get_struct_6h4dh3di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6h4dh3di = None
def _get_struct_6h4dh3di():
    global _struct_6h4dh3di
    if _struct_6h4dh3di is None:
        _struct_6h4dh3di = struct.Struct("<6h4dh3di")
    return _struct_6h4dh3di
