# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fixposition_driver_ros1/gprmc.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gprmc(genpy.Message):
  _md5sum = "50641526ce3dc086b7d7754b7f9196df"
  _type = "fixposition_driver_ros1/gprmc"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """####################################################################################################
#
#    Copyright (c) 2023  ___     ___
#                       \\  \\  /  /
#                        \\  \\/  /
#                         /  /\\  \\
#                        /__/  \\__\\  Fixposition AG
#
####################################################################################################
#
# Fixposition NMEA-GP-RMC Message
#
#
####################################################################################################

# Format | Field     | Unit              | Description
# -------|-----------|-------------------|--------------------------------------------------------|
string     time      # [hhmmss.ss(ss)]   | UTC time (hours, minutes and seconds).
char       status    # [-]               | Data validity status, A (data valid) or V (not valid).
float64    latitude  # [ddmm.mmmmm(mm)]  | Latitude.
char       lat_ns    # [-]               | Latitude north (N) or south (S) indicator.
float64    longitude # [dddmm.mmmmm(mm)] | Longitude.
char       lon_ew    # [-]               | Longitude east (E) or west (W) indicator.
float64    speed     # [knots]           | Speed over ground.
float64    course    # [deg]             | Course over ground (w.r.t. True North).
string     date      # [ddmmyy]          | UTC date (day, month and year).
char       mode      # [-]               | Positioning system mode indicator (see below).

# Mode table
#
# | ID | Signal                |
# |----|-----------------------|
# |  N | Data not valid        |
# |  E | Dead-reckoning        |
# |  D | Differential          |
# |  A | Autonomous            |
# |  M | Manual input not used |
# |  S | Simulator not used    |
"""
  __slots__ = ['time','status','latitude','lat_ns','longitude','lon_ew','speed','course','date','mode']
  _slot_types = ['string','char','float64','char','float64','char','float64','float64','string','char']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,status,latitude,lat_ns,longitude,lon_ew,speed,course,date,mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gprmc, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = ''
      if self.status is None:
        self.status = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.lat_ns is None:
        self.lat_ns = 0
      if self.longitude is None:
        self.longitude = 0.
      if self.lon_ew is None:
        self.lon_ew = 0
      if self.speed is None:
        self.speed = 0.
      if self.course is None:
        self.course = 0.
      if self.date is None:
        self.date = ''
      if self.mode is None:
        self.mode = 0
    else:
      self.time = ''
      self.status = 0
      self.latitude = 0.
      self.lat_ns = 0
      self.longitude = 0.
      self.lon_ew = 0
      self.speed = 0.
      self.course = 0.
      self.date = ''
      self.mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BdBdB2d().pack(_x.status, _x.latitude, _x.lat_ns, _x.longitude, _x.lon_ew, _x.speed, _x.course))
      _x = self.date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mode
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.time = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.status, _x.latitude, _x.lat_ns, _x.longitude, _x.lon_ew, _x.speed, _x.course,) = _get_struct_BdBdB2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.date = str[start:end]
      start = end
      end += 1
      (self.mode,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BdBdB2d().pack(_x.status, _x.latitude, _x.lat_ns, _x.longitude, _x.lon_ew, _x.speed, _x.course))
      _x = self.date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mode
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.time = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.status, _x.latitude, _x.lat_ns, _x.longitude, _x.lon_ew, _x.speed, _x.course,) = _get_struct_BdBdB2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.date = str[start:end]
      start = end
      end += 1
      (self.mode,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BdBdB2d = None
def _get_struct_BdBdB2d():
    global _struct_BdBdB2d
    if _struct_BdBdB2d is None:
        _struct_BdBdB2d = struct.Struct("<BdBdB2d")
    return _struct_BdBdB2d
