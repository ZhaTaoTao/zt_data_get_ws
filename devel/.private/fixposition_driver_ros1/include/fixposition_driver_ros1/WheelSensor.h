// Generated by gencpp from file fixposition_driver_ros1/WheelSensor.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_WHEELSENSOR_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_WHEELSENSOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct WheelSensor_
{
  typedef WheelSensor_<ContainerAllocator> Type;

  WheelSensor_()
    : header()
    , location()
    , vx(0)
    , vy(0)
    , vz(0)
    , vx_valid(false)
    , vy_valid(false)
    , vz_valid(false)  {
    }
  WheelSensor_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , location(_alloc)
    , vx(0)
    , vy(0)
    , vz(0)
    , vx_valid(false)
    , vy_valid(false)
    , vz_valid(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _location_type;
  _location_type location;

   typedef int32_t _vx_type;
  _vx_type vx;

   typedef int32_t _vy_type;
  _vy_type vy;

   typedef int32_t _vz_type;
  _vz_type vz;

   typedef uint8_t _vx_valid_type;
  _vx_valid_type vx_valid;

   typedef uint8_t _vy_valid_type;
  _vy_valid_type vy_valid;

   typedef uint8_t _vz_valid_type;
  _vz_valid_type vz_valid;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> const> ConstPtr;

}; // struct WheelSensor_

typedef ::fixposition_driver_ros1::WheelSensor_<std::allocator<void> > WheelSensor;

typedef boost::shared_ptr< ::fixposition_driver_ros1::WheelSensor > WheelSensorPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::WheelSensor const> WheelSensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.location == rhs.location &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz &&
    lhs.vx_valid == rhs.vx_valid &&
    lhs.vy_valid == rhs.vy_valid &&
    lhs.vz_valid == rhs.vz_valid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80080356d0f1e51e2dbb0fca7fd5dc02";
  }

  static const char* value(const ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80080356d0f1e51eULL;
  static const uint64_t static_value2 = 0x2dbb0fca7fd5dc02ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/WheelSensor";
  }

  static const char* value(const ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Individual wheelspeed measurement\n"
"#\n"
"#\n"
"####################################################################################################\n"
"# Standard metadata\n"
"std_msgs/Header header\n"
"\n"
"# Location of the wheelspeed measurement (one of: RC, FR, FL, RR, RL)\n"
"string location\n"
"\n"
"# Velocity values in [mm/s] as integer 32bit\n"
"int32 vx\n"
"int32 vy\n"
"int32 vz\n"
"\n"
"# Velocity validity\n"
"bool vx_valid\n"
"bool vy_valid\n"
"bool vz_valid\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.location);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.vx_valid);
      stream.next(m.vy_valid);
      stream.next(m.vz_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelSensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::WheelSensor_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.location);
    s << indent << "vx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vz);
    s << indent << "vx_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vx_valid);
    s << indent << "vy_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vy_valid);
    s << indent << "vz_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vz_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_WHEELSENSOR_H
