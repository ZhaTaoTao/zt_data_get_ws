// Generated by gencpp from file fixposition_driver_ros1/gpgga.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_GPGGA_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_GPGGA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct gpgga_
{
  typedef gpgga_<ContainerAllocator> Type;

  gpgga_()
    : time()
    , latitude(0.0)
    , lat_ns(0)
    , longitude(0.0)
    , lon_ew(0)
    , quality(0)
    , num_sv(0)
    , hdop(0.0)
    , alt(0.0)
    , alt_unit(0)
    , diff_age(0.0)
    , diff_sta()
    , sentence()  {
    }
  gpgga_(const ContainerAllocator& _alloc)
    : time(_alloc)
    , latitude(0.0)
    , lat_ns(0)
    , longitude(0.0)
    , lon_ew(0)
    , quality(0)
    , num_sv(0)
    , hdop(0.0)
    , alt(0.0)
    , alt_unit(0)
    , diff_age(0.0)
    , diff_sta(_alloc)
    , sentence(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _time_type;
  _time_type time;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef uint8_t _lat_ns_type;
  _lat_ns_type lat_ns;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef uint8_t _lon_ew_type;
  _lon_ew_type lon_ew;

   typedef int8_t _quality_type;
  _quality_type quality;

   typedef int8_t _num_sv_type;
  _num_sv_type num_sv;

   typedef double _hdop_type;
  _hdop_type hdop;

   typedef double _alt_type;
  _alt_type alt;

   typedef uint8_t _alt_unit_type;
  _alt_unit_type alt_unit;

   typedef double _diff_age_type;
  _diff_age_type diff_age;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _diff_sta_type;
  _diff_sta_type diff_sta;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sentence_type;
  _sentence_type sentence;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> const> ConstPtr;

}; // struct gpgga_

typedef ::fixposition_driver_ros1::gpgga_<std::allocator<void> > gpgga;

typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgga > gpggaPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgga const> gpggaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::gpgga_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::gpgga_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gpgga_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.latitude == rhs.latitude &&
    lhs.lat_ns == rhs.lat_ns &&
    lhs.longitude == rhs.longitude &&
    lhs.lon_ew == rhs.lon_ew &&
    lhs.quality == rhs.quality &&
    lhs.num_sv == rhs.num_sv &&
    lhs.hdop == rhs.hdop &&
    lhs.alt == rhs.alt &&
    lhs.alt_unit == rhs.alt_unit &&
    lhs.diff_age == rhs.diff_age &&
    lhs.diff_sta == rhs.diff_sta &&
    lhs.sentence == rhs.sentence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::gpgga_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gpgga_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "923382eb309c5f8409774d790a9139d8";
  }

  static const char* value(const ::fixposition_driver_ros1::gpgga_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x923382eb309c5f84ULL;
  static const uint64_t static_value2 = 0x09774d790a9139d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/gpgga";
  }

  static const char* value(const ::fixposition_driver_ros1::gpgga_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition NMEA-GP-GGA Message\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"# Format | Field     | Unit              | Description\n"
"# -------|-----------|-------------------|----------------------------------------------------------------------|\n"
"string     time      # [hhmmss.ss(ss)]   | UTC time (hours, minutes and seconds).\n"
"float64    latitude  # [ddmm.mmmmm(mm)]  | Latitude.\n"
"char       lat_ns    # [-]               | Latitude north (N) or south (S) indicator.\n"
"float64    longitude # [dddmm.mmmmm(mm)] | Longitude.\n"
"char       lon_ew    # [-]               | Longitude east (E) or west (W) indicator.\n"
"int8       quality   # [-]               | Quality indicator (see below).\n"
"int8       num_sv    # [-]               | Number of satellites. Strict NMEA: 00-12. High-precision NMEA: 00-99.\n"
"float64    hdop      # [0.10-99.99]      | Horizontal dilution of precision.\n"
"float64    alt       # [m]               | Altitude (above ellipsoid).\n"
"char       alt_unit  # [-]               | Altitude unit, always M (metres).\n"
"float64    diff_age  # [-]               | Approximate age of differential data (last GPS MSM message received).\n"
"string     diff_sta  # [-]               | DGPS station ID (0000-1023).\n"
"string     sentence  # [-]               | ASCII string to be used by NTRIP clients.\n"
"\n"
"# Quality indicator table\n"
"#\n"
"# | ID | Signal         |\n"
"# |----|----------------|\n"
"# |  0 | Invalid        |\n"
"# |  1 | Non-RTK fix    |\n"
"# |  4 | RTK fixed      |\n"
"# |  5 | RTK float      |\n"
"# |  6 | Dead-reckoning |\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::gpgga_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.latitude);
      stream.next(m.lat_ns);
      stream.next(m.longitude);
      stream.next(m.lon_ew);
      stream.next(m.quality);
      stream.next(m.num_sv);
      stream.next(m.hdop);
      stream.next(m.alt);
      stream.next(m.alt_unit);
      stream.next(m.diff_age);
      stream.next(m.diff_sta);
      stream.next(m.sentence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gpgga_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::gpgga_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::gpgga_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.time);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "lat_ns: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lat_ns);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "lon_ew: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lon_ew);
    s << indent << "quality: ";
    Printer<int8_t>::stream(s, indent + "  ", v.quality);
    s << indent << "num_sv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.num_sv);
    s << indent << "hdop: ";
    Printer<double>::stream(s, indent + "  ", v.hdop);
    s << indent << "alt: ";
    Printer<double>::stream(s, indent + "  ", v.alt);
    s << indent << "alt_unit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alt_unit);
    s << indent << "diff_age: ";
    Printer<double>::stream(s, indent + "  ", v.diff_age);
    s << indent << "diff_sta: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.diff_sta);
    s << indent << "sentence: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sentence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_GPGGA_H
