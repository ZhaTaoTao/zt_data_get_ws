// Generated by gencpp from file fixposition_driver_ros1/gpgll.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_GPGLL_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_GPGLL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct gpgll_
{
  typedef gpgll_<ContainerAllocator> Type;

  gpgll_()
    : latitude(0.0)
    , lat_ns(0)
    , longitude(0.0)
    , lon_ew(0)
    , time()
    , status(0)
    , mode(0)  {
    }
  gpgll_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , lat_ns(0)
    , longitude(0.0)
    , lon_ew(0)
    , time(_alloc)
    , status(0)
    , mode(0)  {
  (void)_alloc;
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef uint8_t _lat_ns_type;
  _lat_ns_type lat_ns;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef uint8_t _lon_ew_type;
  _lon_ew_type lon_ew;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _time_type;
  _time_type time;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> const> ConstPtr;

}; // struct gpgll_

typedef ::fixposition_driver_ros1::gpgll_<std::allocator<void> > gpgll;

typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgll > gpgllPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgll const> gpgllConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::gpgll_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::gpgll_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gpgll_<ContainerAllocator2> & rhs)
{
  return lhs.latitude == rhs.latitude &&
    lhs.lat_ns == rhs.lat_ns &&
    lhs.longitude == rhs.longitude &&
    lhs.lon_ew == rhs.lon_ew &&
    lhs.time == rhs.time &&
    lhs.status == rhs.status &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::gpgll_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gpgll_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3576975fe64f5ded3db23e0cd342a87";
  }

  static const char* value(const ::fixposition_driver_ros1::gpgll_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3576975fe64f5deULL;
  static const uint64_t static_value2 = 0xd3db23e0cd342a87ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/gpgll";
  }

  static const char* value(const ::fixposition_driver_ros1::gpgll_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition NMEA-GP-GLL Message\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"# Format | Field     | Unit              | Description\n"
"# -------|-----------|-------------------|--------------------------------------------------------|\n"
"float64    latitude  # [ddmm.mmmmm(mm)]  | Latitude.\n"
"char       lat_ns    # [-]               | Latitude north (N) or south (S) indicator.\n"
"float64    longitude # [dddmm.mmmmm(mm)] | Longitude.\n"
"char       lon_ew    # [-]               | Longitude east (E) or west (W) indicator.\n"
"string     time      # [hhmmss.ss(ss)]   | UTC time (hours, minutes and seconds).\n"
"char       status    # [-]               | Data validity status, A (data valid) or V (not valid).\n"
"char       mode      # [-]               | Positioning system mode indicator (see below).\n"
"\n"
"# Mode table\n"
"#\n"
"# | ID | Signal                |\n"
"# |----|-----------------------|\n"
"# |  N | Data not valid        |\n"
"# |  E | Dead-reckoning        |\n"
"# |  D | Differential          |\n"
"# |  A | Autonomous            |\n"
"# |  M | Manual input not used |\n"
"# |  S | Simulator not used    |\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::gpgll_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.lat_ns);
      stream.next(m.longitude);
      stream.next(m.lon_ew);
      stream.next(m.time);
      stream.next(m.status);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gpgll_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::gpgll_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::gpgll_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "lat_ns: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lat_ns);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "lon_ew: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lon_ew);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.time);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_GPGLL_H
