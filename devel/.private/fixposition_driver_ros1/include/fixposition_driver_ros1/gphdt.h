// Generated by gencpp from file fixposition_driver_ros1/gphdt.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_GPHDT_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_GPHDT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct gphdt_
{
  typedef gphdt_<ContainerAllocator> Type;

  gphdt_()
    : heading(0.0)
    , true_ind(0)  {
    }
  gphdt_(const ContainerAllocator& _alloc)
    : heading(0.0)
    , true_ind(0)  {
  (void)_alloc;
    }



   typedef double _heading_type;
  _heading_type heading;

   typedef uint8_t _true_ind_type;
  _true_ind_type true_ind;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> const> ConstPtr;

}; // struct gphdt_

typedef ::fixposition_driver_ros1::gphdt_<std::allocator<void> > gphdt;

typedef boost::shared_ptr< ::fixposition_driver_ros1::gphdt > gphdtPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::gphdt const> gphdtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::gphdt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::gphdt_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gphdt_<ContainerAllocator2> & rhs)
{
  return lhs.heading == rhs.heading &&
    lhs.true_ind == rhs.true_ind;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::gphdt_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gphdt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f570455b15548c6d0b34662ea781cd6c";
  }

  static const char* value(const ::fixposition_driver_ros1::gphdt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf570455b15548c6dULL;
  static const uint64_t static_value2 = 0x0b34662ea781cd6cULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/gphdt";
  }

  static const char* value(const ::fixposition_driver_ros1::gphdt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition NMEA-GP-HDT Message\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"# Format | Field    | Unit  | Description\n"
"# -------|----------|-------|---------------|\n"
"float64    heading  # [deg] | True heading.\n"
"char       true_ind # [-]   | Always T.\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::gphdt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.heading);
      stream.next(m.true_ind);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gphdt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::gphdt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::gphdt_<ContainerAllocator>& v)
  {
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "true_ind: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.true_ind);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_GPHDT_H
