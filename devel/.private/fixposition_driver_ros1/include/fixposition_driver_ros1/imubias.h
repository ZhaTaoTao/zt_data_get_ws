// Generated by gencpp from file fixposition_driver_ros1/imubias.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_IMUBIAS_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_IMUBIAS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct imubias_
{
  typedef imubias_<ContainerAllocator> Type;

  imubias_()
    : header()
    , fusion_imu(0)
    , imu_status(0)
    , imu_noise(0)
    , imu_conv(0)
    , bias_acc()
    , bias_gyr()
    , bias_cov_acc()
    , bias_cov_gyr()  {
    }
  imubias_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fusion_imu(0)
    , imu_status(0)
    , imu_noise(0)
    , imu_conv(0)
    , bias_acc(_alloc)
    , bias_gyr(_alloc)
    , bias_cov_acc(_alloc)
    , bias_cov_gyr(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _fusion_imu_type;
  _fusion_imu_type fusion_imu;

   typedef int16_t _imu_status_type;
  _imu_status_type imu_status;

   typedef int16_t _imu_noise_type;
  _imu_noise_type imu_noise;

   typedef int16_t _imu_conv_type;
  _imu_conv_type imu_conv;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _bias_acc_type;
  _bias_acc_type bias_acc;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _bias_gyr_type;
  _bias_gyr_type bias_gyr;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _bias_cov_acc_type;
  _bias_cov_acc_type bias_cov_acc;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _bias_cov_gyr_type;
  _bias_cov_gyr_type bias_cov_gyr;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::imubias_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::imubias_<ContainerAllocator> const> ConstPtr;

}; // struct imubias_

typedef ::fixposition_driver_ros1::imubias_<std::allocator<void> > imubias;

typedef boost::shared_ptr< ::fixposition_driver_ros1::imubias > imubiasPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::imubias const> imubiasConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::imubias_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::imubias_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::imubias_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::imubias_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.fusion_imu == rhs.fusion_imu &&
    lhs.imu_status == rhs.imu_status &&
    lhs.imu_noise == rhs.imu_noise &&
    lhs.imu_conv == rhs.imu_conv &&
    lhs.bias_acc == rhs.bias_acc &&
    lhs.bias_gyr == rhs.bias_gyr &&
    lhs.bias_cov_acc == rhs.bias_cov_acc &&
    lhs.bias_cov_gyr == rhs.bias_cov_gyr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::imubias_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::imubias_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::imubias_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::imubias_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::imubias_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::imubias_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::imubias_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::imubias_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::imubias_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35ce34652f0847b6fbe7e55097d74211";
  }

  static const char* value(const ::fixposition_driver_ros1::imubias_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35ce34652f0847b6ULL;
  static const uint64_t static_value2 = 0xfbe7e55097d74211ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::imubias_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/imubias";
  }

  static const char* value(const ::fixposition_driver_ros1::imubias_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::imubias_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition FP_A-IMUBIAS Message\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"Header header\n"
"int16 fusion_imu                     # Fusion measurement status: IMU (see below)\n"
"int16 imu_status                     # IMU bias status (see below)\n"
"int16 imu_noise                      # IMU variance status (see below)\n"
"int16 imu_conv                       # IMU convergence status (see below)\n"
"geometry_msgs/Vector3 bias_acc       # Accelerometer bias\n"
"geometry_msgs/Vector3 bias_gyr       # Gyroscope bias\n"
"geometry_msgs/Vector3 bias_cov_acc   # Accelerometer bias covariance\n"
"geometry_msgs/Vector3 bias_cov_gyr   # Gyroscope bias covariance\n"
"\n"
"\n"
"# Fusion measurement status (fusion_imu)\n"
"#\n"
"# | Value | Description        |\n"
"# |-------|--------------------|\n"
"# |  null | Info not available |\n"
"# |   0   | Not used           |\n"
"# |   1   | Used               |\n"
"# |   2   | Degraded           |\n"
"\n"
"\n"
"# IMU bias status (imu_status)\n"
"#\n"
"# | Value | Description        |\n"
"# |-------|--------------------|\n"
"# |  null | Info not available |\n"
"# |   0   | Not converged      |\n"
"# |   1   | Warmstarted        |\n"
"# |   2   | Rough convergence  |\n"
"# |   3   | Fine convergence   |\n"
"\n"
"\n"
"# IMU variance (imu_noise)\n"
"#\n"
"# | Value | Description        |\n"
"# |-------|--------------------|\n"
"# |  null | Info not available |\n"
"# |   0   | Reserved           |\n"
"# |   1   | Low noise          |\n"
"# |   2   | Medium noise       |\n"
"# |   3   | High noise         |\n"
"# | 4...7 | Reserved           |\n"
"\n"
"\n"
"# IMU accelerometer and gyroscope convergence (imu_conv)\n"
"#\n"
"# | Value | Description                      |\n"
"# |-------|----------------------------------|\n"
"# |  null | Info not available               |\n"
"# |   0   | Awaiting Fusion                  |\n"
"# |   1   | Awaiting IMU measurements        |\n"
"# |   2   | Insufficient global measurements |\n"
"# |   3   | Insufficient motion              |\n"
"# |   4   | Converging                       |\n"
"# | 5...6 | Reserved                         |\n"
"# |   7   | Idle                             |\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::imubias_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::imubias_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fusion_imu);
      stream.next(m.imu_status);
      stream.next(m.imu_noise);
      stream.next(m.imu_conv);
      stream.next(m.bias_acc);
      stream.next(m.bias_gyr);
      stream.next(m.bias_cov_acc);
      stream.next(m.bias_cov_gyr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imubias_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::imubias_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::imubias_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fusion_imu: ";
    Printer<int16_t>::stream(s, indent + "  ", v.fusion_imu);
    s << indent << "imu_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.imu_status);
    s << indent << "imu_noise: ";
    Printer<int16_t>::stream(s, indent + "  ", v.imu_noise);
    s << indent << "imu_conv: ";
    Printer<int16_t>::stream(s, indent + "  ", v.imu_conv);
    s << indent << "bias_acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.bias_acc);
    s << indent << "bias_gyr: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.bias_gyr);
    s << indent << "bias_cov_acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.bias_cov_acc);
    s << indent << "bias_cov_gyr: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.bias_cov_gyr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_IMUBIAS_H
