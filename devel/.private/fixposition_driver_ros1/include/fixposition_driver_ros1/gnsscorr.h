// Generated by gencpp from file fixposition_driver_ros1/gnsscorr.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_GNSSCORR_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_GNSSCORR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>

namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct gnsscorr_
{
  typedef gnsscorr_<ContainerAllocator> Type;

  gnsscorr_()
    : header()
    , gnss1_fix(0)
    , gnss1_nsig_l1(0)
    , gnss1_nsig_l2(0)
    , gnss2_fix(0)
    , gnss2_nsig_l1(0)
    , gnss2_nsig_l2(0)
    , corr_latency(0.0)
    , corr_update_rate(0.0)
    , corr_data_rate(0.0)
    , corr_msg_rate(0.0)
    , sta_id(0)
    , sta_llh()
    , sta_dist(0)  {
    }
  gnsscorr_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gnss1_fix(0)
    , gnss1_nsig_l1(0)
    , gnss1_nsig_l2(0)
    , gnss2_fix(0)
    , gnss2_nsig_l1(0)
    , gnss2_nsig_l2(0)
    , corr_latency(0.0)
    , corr_update_rate(0.0)
    , corr_data_rate(0.0)
    , corr_msg_rate(0.0)
    , sta_id(0)
    , sta_llh(_alloc)
    , sta_dist(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _gnss1_fix_type;
  _gnss1_fix_type gnss1_fix;

   typedef int16_t _gnss1_nsig_l1_type;
  _gnss1_nsig_l1_type gnss1_nsig_l1;

   typedef int16_t _gnss1_nsig_l2_type;
  _gnss1_nsig_l2_type gnss1_nsig_l2;

   typedef int16_t _gnss2_fix_type;
  _gnss2_fix_type gnss2_fix;

   typedef int16_t _gnss2_nsig_l1_type;
  _gnss2_nsig_l1_type gnss2_nsig_l1;

   typedef int16_t _gnss2_nsig_l2_type;
  _gnss2_nsig_l2_type gnss2_nsig_l2;

   typedef double _corr_latency_type;
  _corr_latency_type corr_latency;

   typedef double _corr_update_rate_type;
  _corr_update_rate_type corr_update_rate;

   typedef double _corr_data_rate_type;
  _corr_data_rate_type corr_data_rate;

   typedef double _corr_msg_rate_type;
  _corr_msg_rate_type corr_msg_rate;

   typedef int16_t _sta_id_type;
  _sta_id_type sta_id;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _sta_llh_type;
  _sta_llh_type sta_llh;

   typedef int32_t _sta_dist_type;
  _sta_dist_type sta_dist;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> const> ConstPtr;

}; // struct gnsscorr_

typedef ::fixposition_driver_ros1::gnsscorr_<std::allocator<void> > gnsscorr;

typedef boost::shared_ptr< ::fixposition_driver_ros1::gnsscorr > gnsscorrPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::gnsscorr const> gnsscorrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gnss1_fix == rhs.gnss1_fix &&
    lhs.gnss1_nsig_l1 == rhs.gnss1_nsig_l1 &&
    lhs.gnss1_nsig_l2 == rhs.gnss1_nsig_l2 &&
    lhs.gnss2_fix == rhs.gnss2_fix &&
    lhs.gnss2_nsig_l1 == rhs.gnss2_nsig_l1 &&
    lhs.gnss2_nsig_l2 == rhs.gnss2_nsig_l2 &&
    lhs.corr_latency == rhs.corr_latency &&
    lhs.corr_update_rate == rhs.corr_update_rate &&
    lhs.corr_data_rate == rhs.corr_data_rate &&
    lhs.corr_msg_rate == rhs.corr_msg_rate &&
    lhs.sta_id == rhs.sta_id &&
    lhs.sta_llh == rhs.sta_llh &&
    lhs.sta_dist == rhs.sta_dist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b77ad2e5b59b9f0261c4a7de8a44a073";
  }

  static const char* value(const ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb77ad2e5b59b9f02ULL;
  static const uint64_t static_value2 = 0x61c4a7de8a44a073ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/gnsscorr";
  }

  static const char* value(const ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition FP_A-GNSSCORR Message\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"Header header\n"
"int16 gnss1_fix          # GNSS1 fix status\n"
"int16 gnss1_nsig_l1      # Number of L1 signals with correction data tracked by GNSS1\n"
"int16 gnss1_nsig_l2      # Number of L2 signals with correction data tracked by GNSS1\n"
"int16 gnss2_fix          # GNSS2 fix status\n"
"int16 gnss2_nsig_l1      # Number of L1 signals with correction data tracked by GNSS2\n"
"int16 gnss2_nsig_l2      # Number of L2 signals with correction data tracked by GNSS2\n"
"\n"
"float64 corr_latency       # Average correction data latency (10s window)\n"
"float64 corr_update_rate   # Average correction update rate (10s window)\n"
"float64 corr_data_rate     # Average correction data rate (10s window)\n"
"float64 corr_msg_rate      # Average correction message rate (10s window)\n"
"\n"
"int16 sta_id                    # Correction station ID, range 0â€“4095\n"
"geometry_msgs/Vector3 sta_llh   # Correction station LLH position (latitude, longitude, height)\n"
"int32 sta_dist                  # Correction station baseline length\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gnss1_fix);
      stream.next(m.gnss1_nsig_l1);
      stream.next(m.gnss1_nsig_l2);
      stream.next(m.gnss2_fix);
      stream.next(m.gnss2_nsig_l1);
      stream.next(m.gnss2_nsig_l2);
      stream.next(m.corr_latency);
      stream.next(m.corr_update_rate);
      stream.next(m.corr_data_rate);
      stream.next(m.corr_msg_rate);
      stream.next(m.sta_id);
      stream.next(m.sta_llh);
      stream.next(m.sta_dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gnsscorr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::gnsscorr_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gnss1_fix: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gnss1_fix);
    s << indent << "gnss1_nsig_l1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gnss1_nsig_l1);
    s << indent << "gnss1_nsig_l2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gnss1_nsig_l2);
    s << indent << "gnss2_fix: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gnss2_fix);
    s << indent << "gnss2_nsig_l1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gnss2_nsig_l1);
    s << indent << "gnss2_nsig_l2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gnss2_nsig_l2);
    s << indent << "corr_latency: ";
    Printer<double>::stream(s, indent + "  ", v.corr_latency);
    s << indent << "corr_update_rate: ";
    Printer<double>::stream(s, indent + "  ", v.corr_update_rate);
    s << indent << "corr_data_rate: ";
    Printer<double>::stream(s, indent + "  ", v.corr_data_rate);
    s << indent << "corr_msg_rate: ";
    Printer<double>::stream(s, indent + "  ", v.corr_msg_rate);
    s << indent << "sta_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sta_id);
    s << indent << "sta_llh: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.sta_llh);
    s << indent << "sta_dist: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sta_dist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_GNSSCORR_H
