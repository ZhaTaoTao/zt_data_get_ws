// Generated by gencpp from file fixposition_driver_ros1/gpgst.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_GPGST_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_GPGST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct gpgst_
{
  typedef gpgst_<ContainerAllocator> Type;

  gpgst_()
    : time()
    , rms_range(0.0)
    , std_major(0.0)
    , std_minor(0.0)
    , angle_major(0.0)
    , std_lat(0.0)
    , std_lon(0.0)
    , std_alt(0.0)  {
    }
  gpgst_(const ContainerAllocator& _alloc)
    : time(_alloc)
    , rms_range(0.0)
    , std_major(0.0)
    , std_minor(0.0)
    , angle_major(0.0)
    , std_lat(0.0)
    , std_lon(0.0)
    , std_alt(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _time_type;
  _time_type time;

   typedef double _rms_range_type;
  _rms_range_type rms_range;

   typedef double _std_major_type;
  _std_major_type std_major;

   typedef double _std_minor_type;
  _std_minor_type std_minor;

   typedef double _angle_major_type;
  _angle_major_type angle_major;

   typedef double _std_lat_type;
  _std_lat_type std_lat;

   typedef double _std_lon_type;
  _std_lon_type std_lon;

   typedef double _std_alt_type;
  _std_alt_type std_alt;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> const> ConstPtr;

}; // struct gpgst_

typedef ::fixposition_driver_ros1::gpgst_<std::allocator<void> > gpgst;

typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgst > gpgstPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::gpgst const> gpgstConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::gpgst_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::gpgst_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gpgst_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.rms_range == rhs.rms_range &&
    lhs.std_major == rhs.std_major &&
    lhs.std_minor == rhs.std_minor &&
    lhs.angle_major == rhs.angle_major &&
    lhs.std_lat == rhs.std_lat &&
    lhs.std_lon == rhs.std_lon &&
    lhs.std_alt == rhs.std_alt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::gpgst_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gpgst_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3488fe86af0a80e28c42198845ea643a";
  }

  static const char* value(const ::fixposition_driver_ros1::gpgst_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3488fe86af0a80e2ULL;
  static const uint64_t static_value2 = 0x8c42198845ea643aULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/gpgst";
  }

  static const char* value(const ::fixposition_driver_ros1::gpgst_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition NMEA-GP-GST Message\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"# Format | Field       | Unit            | Description\n"
"# -------|-------------|-----------------|------------------------------------------------------------------------------------|\n"
"string     time        # [hhmmss.ss(ss)] | UTC time (hours, minutes and seconds).\n"
"float64    rms_range   # [-]             | RMS value of the standard deviation of the range inputs to the navigation process.\n"
"float64    std_major   # [m]             | Standard deviation of semi-major axis of error ellipse.\n"
"float64    std_minor   # [m]             | Standard deviation of semi-minor axis of error ellipse.\n"
"float64    angle_major # [deg]           | Angle of semi-major axis of error ellipse from true North.\n"
"float64    std_lat     # [m]             | Standard deviation of latitude error.\n"
"float64    std_lon     # [m]             | Standard deviation of longitude error.\n"
"float64    std_alt     # [m]             | Standard deviation of altitude error.\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::gpgst_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.rms_range);
      stream.next(m.std_major);
      stream.next(m.std_minor);
      stream.next(m.angle_major);
      stream.next(m.std_lat);
      stream.next(m.std_lon);
      stream.next(m.std_alt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gpgst_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::gpgst_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::gpgst_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.time);
    s << indent << "rms_range: ";
    Printer<double>::stream(s, indent + "  ", v.rms_range);
    s << indent << "std_major: ";
    Printer<double>::stream(s, indent + "  ", v.std_major);
    s << indent << "std_minor: ";
    Printer<double>::stream(s, indent + "  ", v.std_minor);
    s << indent << "angle_major: ";
    Printer<double>::stream(s, indent + "  ", v.angle_major);
    s << indent << "std_lat: ";
    Printer<double>::stream(s, indent + "  ", v.std_lat);
    s << indent << "std_lon: ";
    Printer<double>::stream(s, indent + "  ", v.std_lon);
    s << indent << "std_alt: ";
    Printer<double>::stream(s, indent + "  ", v.std_alt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_GPGST_H
