// Generated by gencpp from file fixposition_driver_ros1/odomstatus.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_ODOMSTATUS_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_ODOMSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct odomstatus_
{
  typedef odomstatus_<ContainerAllocator> Type;

  odomstatus_()
    : header()
    , init_status(0)
    , fusion_imu(0)
    , fusion_gnss1(0)
    , fusion_gnss2(0)
    , fusion_corr(0)
    , fusion_cam1(0)
    , fusion_ws(0)
    , fusion_markers(0)
    , imu_status(0)
    , imu_noise(0)
    , imu_conv(0)
    , gnss1_status(0)
    , gnss2_status(0)
    , baseline_status(0)
    , corr_status(0)
    , cam1_status(0)
    , ws_status(0)
    , ws_conv(0)
    , markers_status(0)
    , markers_conv(0)  {
    }
  odomstatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , init_status(0)
    , fusion_imu(0)
    , fusion_gnss1(0)
    , fusion_gnss2(0)
    , fusion_corr(0)
    , fusion_cam1(0)
    , fusion_ws(0)
    , fusion_markers(0)
    , imu_status(0)
    , imu_noise(0)
    , imu_conv(0)
    , gnss1_status(0)
    , gnss2_status(0)
    , baseline_status(0)
    , corr_status(0)
    , cam1_status(0)
    , ws_status(0)
    , ws_conv(0)
    , markers_status(0)
    , markers_conv(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _init_status_type;
  _init_status_type init_status;

   typedef int16_t _fusion_imu_type;
  _fusion_imu_type fusion_imu;

   typedef int16_t _fusion_gnss1_type;
  _fusion_gnss1_type fusion_gnss1;

   typedef int16_t _fusion_gnss2_type;
  _fusion_gnss2_type fusion_gnss2;

   typedef int16_t _fusion_corr_type;
  _fusion_corr_type fusion_corr;

   typedef int16_t _fusion_cam1_type;
  _fusion_cam1_type fusion_cam1;

   typedef int16_t _fusion_ws_type;
  _fusion_ws_type fusion_ws;

   typedef int16_t _fusion_markers_type;
  _fusion_markers_type fusion_markers;

   typedef int16_t _imu_status_type;
  _imu_status_type imu_status;

   typedef int16_t _imu_noise_type;
  _imu_noise_type imu_noise;

   typedef int16_t _imu_conv_type;
  _imu_conv_type imu_conv;

   typedef int16_t _gnss1_status_type;
  _gnss1_status_type gnss1_status;

   typedef int16_t _gnss2_status_type;
  _gnss2_status_type gnss2_status;

   typedef int16_t _baseline_status_type;
  _baseline_status_type baseline_status;

   typedef int16_t _corr_status_type;
  _corr_status_type corr_status;

   typedef int16_t _cam1_status_type;
  _cam1_status_type cam1_status;

   typedef int16_t _ws_status_type;
  _ws_status_type ws_status;

   typedef int16_t _ws_conv_type;
  _ws_conv_type ws_conv;

   typedef int16_t _markers_status_type;
  _markers_status_type markers_status;

   typedef int16_t _markers_conv_type;
  _markers_conv_type markers_conv;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> const> ConstPtr;

}; // struct odomstatus_

typedef ::fixposition_driver_ros1::odomstatus_<std::allocator<void> > odomstatus;

typedef boost::shared_ptr< ::fixposition_driver_ros1::odomstatus > odomstatusPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::odomstatus const> odomstatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::odomstatus_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::odomstatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.init_status == rhs.init_status &&
    lhs.fusion_imu == rhs.fusion_imu &&
    lhs.fusion_gnss1 == rhs.fusion_gnss1 &&
    lhs.fusion_gnss2 == rhs.fusion_gnss2 &&
    lhs.fusion_corr == rhs.fusion_corr &&
    lhs.fusion_cam1 == rhs.fusion_cam1 &&
    lhs.fusion_ws == rhs.fusion_ws &&
    lhs.fusion_markers == rhs.fusion_markers &&
    lhs.imu_status == rhs.imu_status &&
    lhs.imu_noise == rhs.imu_noise &&
    lhs.imu_conv == rhs.imu_conv &&
    lhs.gnss1_status == rhs.gnss1_status &&
    lhs.gnss2_status == rhs.gnss2_status &&
    lhs.baseline_status == rhs.baseline_status &&
    lhs.corr_status == rhs.corr_status &&
    lhs.cam1_status == rhs.cam1_status &&
    lhs.ws_status == rhs.ws_status &&
    lhs.ws_conv == rhs.ws_conv &&
    lhs.markers_status == rhs.markers_status &&
    lhs.markers_conv == rhs.markers_conv;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::odomstatus_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::odomstatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "307cfe184ec2b75acdc3f76049315683";
  }

  static const char* value(const ::fixposition_driver_ros1::odomstatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x307cfe184ec2b75aULL;
  static const uint64_t static_value2 = 0xcdc3f76049315683ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/odomstatus";
  }

  static const char* value(const ::fixposition_driver_ros1::odomstatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition FP_A-ODOMSTATUS Message\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"Header header\n"
"int16 init_status                            # Fusion init status (see below)\n"
"int16 fusion_imu                             # Fusion measurement status: IMU (see below)\n"
"int16 fusion_gnss1                           # Fusion measurement status: GNSS 1 (see below)\n"
"int16 fusion_gnss2                           # Fusion measurement status: GNSS 2 (see below)\n"
"int16 fusion_corr                            # Fusion measurement status: GNSS corrections (see below)\n"
"int16 fusion_cam1                            # Fusion measurement status: camera (see below)\n"
"int16 fusion_ws                              # Fusion measurement status: wheelspeed (see below)\n"
"int16 fusion_markers                         # Fusion measurement status: markers (see below)\n"
"int16 imu_status                             # IMU bias status (see below)\n"
"int16 imu_noise                              # IMU variance status (see below)\n"
"int16 imu_conv                               # IMU convergence status (see below)\n"
"int16 gnss1_status                           # GNSS 1 status (see below)\n"
"int16 gnss2_status                           # GNSS 2 status (see below)\n"
"int16 baseline_status                        # Baseline status (see below)\n"
"int16 corr_status                            # GNSS correction status (see below)\n"
"int16 cam1_status                            # Camera 1 status (see below)\n"
"int16 ws_status                              # Wheelspeed status (see below)\n"
"int16 ws_conv                                # Wheelspeed convergence status (see below)\n"
"int16 markers_status                         # Markers status (see below)\n"
"int16 markers_conv                           # Markers convergence status (see below)\n"
"\n"
"\n"
"# Fusion initialisation status (init_status)\n"
"#\n"
"# | Value | Description          |\n"
"# |-------|----------------------|\n"
"# |  null | Unknown              |\n"
"# |   0   | Not initialized      |\n"
"# |   1   | Locally initialised  |\n"
"# |   2   | Globally initialised |\n"
"\n"
"\n"
"# Fusion measurement status (fusion_imu, fusion_cam1, fusion_cam2, fusion_gnss1, fusion_gnss2, fusion_corr, fusion_ws, fusion_markers)\n"
"#\n"
"# | Value | Description        |\n"
"# |-------|--------------------|\n"
"# |  null | Info not available |\n"
"# |   0   | Not used           |\n"
"# |   1   | Used               |\n"
"# |   2   | Degraded           |\n"
"\n"
"\n"
"# IMU bias status (imu_status)\n"
"#\n"
"# | Value | Description        |\n"
"# |-------|--------------------|\n"
"# |  null | Info not available |\n"
"# |   0   | Not converged      |\n"
"# |   1   | Warmstarted        |\n"
"# |   2   | Rough convergence  |\n"
"# |   3   | Fine convergence   |\n"
"\n"
"\n"
"# IMU variance (imu_noise)\n"
"#\n"
"# | Value | Description        |\n"
"# |-------|--------------------|\n"
"# |  null | Info not available |\n"
"# |   0   | Reserved           |\n"
"# |   1   | Low noise          |\n"
"# |   2   | Medium noise       |\n"
"# |   3   | High noise         |\n"
"# | 4...7 | Reserved           |\n"
"\n"
"\n"
"# IMU accelerometer and gyroscope convergence (imu_conv)\n"
"#\n"
"# | Value | Description                      |\n"
"# |-------|----------------------------------|\n"
"# |  null | Info not available               |\n"
"# |   0   | Awaiting Fusion                  |\n"
"# |   1   | Awaiting IMU measurements        |\n"
"# |   2   | Insufficient global measurements |\n"
"# |   3   | Insufficient motion              |\n"
"# |   4   | Converging                       |\n"
"# | 5...6 | Reserved                         |\n"
"# |   7   | Idle                             |\n"
"\n"
"\n"
"# GNSS fix status (gnss1_status, gnss2_status)\n"
"#\n"
"# | Value | Description                    |\n"
"# |-------|--------------------------------|\n"
"# |  null | Info not available             |\n"
"# |   0   | No fix                         |\n"
"# |   1   | Single-point positioning (SPP) |\n"
"# |   2   | RTK moving baseline            |\n"
"# | 3...4 | Reserved                       |\n"
"# |   5   | RTK float                      |\n"
"# | 6...7 | Reserved                       |\n"
"# |   8   | RTK fixed                      |\n"
"\n"
"\n"
"# GNSS correction status (corr_status)\n"
"#\n"
"# | Value | Description                                                                                                    |\n"
"# |-------|----------------------------------------------------------------------------------------------------------------|\n"
"# |  null | Info not available                                                                                             |\n"
"# |   0   | Waiting fusion                                                                                                 |\n"
"# |   1   | No GNSS available                                                                                              |\n"
"# |   2   | No corrections used                                                                                            |\n"
"# |   3   | Limited corrections used: station data & at least one of the constellations among the valid rover measurements |\n"
"# |   4   | Corrections are too old                                                                                        |\n"
"# |   5   | Sufficient corrections used: station data and corrections for ALL bands among the valid rover measurements     |\n"
"\n"
"\n"
"# Baseline status (baseline_status)\n"
"#\n"
"# | Value | Description            |\n"
"# |-------|------------------------|\n"
"# |  null | Info not available     |\n"
"# |   0   | Waiting fusion         |\n"
"# |   1   | Not available / No fix |\n"
"# |   2   | Failing                |\n"
"# |   3   | Passing                |\n"
"\n"
"\n"
"# Camera status (cam1_status)\n"
"#\n"
"# | Value | Description                                      |\n"
"# |-------|--------------------------------------------------|\n"
"# |  null | Info not available                               |\n"
"# |   0   | Camera not available                             |\n"
"# |   1   | Camera available, but not usable (e.g. too dark) |\n"
"# | 2...4 | Reserved                                         |\n"
"# |   5   | Camera working and available                     |\n"
"\n"
"\n"
"# Wheelspeed status (ws_status)\n"
"#\n"
"# | Value | Description                                                |\n"
"# |-------|------------------------------------------------------------|\n"
"# |  null | Info not available                                         |\n"
"# |   0   | No wheelspeed enabled                                      |\n"
"# |   1   | Missing wheelspeed measurements                            |\n"
"# |   2   | At least one wheelspeed enabled, no wheelspeed converged   |\n"
"# |   3   | At least one wheelspeed enabled and at least one converged |\n"
"# |   4   | At least one wheelspeed enabled and all converged          |\n"
"\n"
"\n"
"# Wheelspeed convergence status (ws_conv)\n"
"#\n"
"# | Value | Description                       |\n"
"# |-------|-----------------------------------|\n"
"# |  null | Info not available                |\n"
"# |   0   | Awaiting Fusion                   |\n"
"# |   1   | Missing wheelspeed measurements   |\n"
"# |   2   | Insufficient global measurements  |\n"
"# |   3   | Insufficient motion               |\n"
"# |   4   | Insufficient imu bias convergence |\n"
"# |   5   | Converging                        |\n"
"# |   6   | Idle                              |\n"
"\n"
"\n"
"# Markers status (markers_status)\n"
"#\n"
"# | Value | Description                 |\n"
"# |-------|-----------------------------|\n"
"# |  null | Info not available          |\n"
"# |   0   | No markers available        |\n"
"# |   1   | Markers available           |\n"
"# |   2   | Markers available, and used |\n"
"\n"
"\n"
"# Markers convergence status (markers_conv)\n"
"#\n"
"# | Value | Description                      |\n"
"# |-------|----------------------------------|\n"
"# |  null | Info not available               |\n"
"# |   0   | Awaiting Fusion                  |\n"
"# |   1   | Waiting marker measurements      |\n"
"# |   2   | Insufficient global measurements |\n"
"# |   3   | Converging                       |\n"
"# |   4   | Idle                             |\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::odomstatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.init_status);
      stream.next(m.fusion_imu);
      stream.next(m.fusion_gnss1);
      stream.next(m.fusion_gnss2);
      stream.next(m.fusion_corr);
      stream.next(m.fusion_cam1);
      stream.next(m.fusion_ws);
      stream.next(m.fusion_markers);
      stream.next(m.imu_status);
      stream.next(m.imu_noise);
      stream.next(m.imu_conv);
      stream.next(m.gnss1_status);
      stream.next(m.gnss2_status);
      stream.next(m.baseline_status);
      stream.next(m.corr_status);
      stream.next(m.cam1_status);
      stream.next(m.ws_status);
      stream.next(m.ws_conv);
      stream.next(m.markers_status);
      stream.next(m.markers_conv);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct odomstatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::odomstatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::odomstatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "init_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.init_status);
    s << indent << "fusion_imu: ";
    Printer<int16_t>::stream(s, indent + "  ", v.fusion_imu);
    s << indent << "fusion_gnss1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.fusion_gnss1);
    s << indent << "fusion_gnss2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.fusion_gnss2);
    s << indent << "fusion_corr: ";
    Printer<int16_t>::stream(s, indent + "  ", v.fusion_corr);
    s << indent << "fusion_cam1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.fusion_cam1);
    s << indent << "fusion_ws: ";
    Printer<int16_t>::stream(s, indent + "  ", v.fusion_ws);
    s << indent << "fusion_markers: ";
    Printer<int16_t>::stream(s, indent + "  ", v.fusion_markers);
    s << indent << "imu_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.imu_status);
    s << indent << "imu_noise: ";
    Printer<int16_t>::stream(s, indent + "  ", v.imu_noise);
    s << indent << "imu_conv: ";
    Printer<int16_t>::stream(s, indent + "  ", v.imu_conv);
    s << indent << "gnss1_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gnss1_status);
    s << indent << "gnss2_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gnss2_status);
    s << indent << "baseline_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.baseline_status);
    s << indent << "corr_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.corr_status);
    s << indent << "cam1_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cam1_status);
    s << indent << "ws_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ws_status);
    s << indent << "ws_conv: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ws_conv);
    s << indent << "markers_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.markers_status);
    s << indent << "markers_conv: ";
    Printer<int16_t>::stream(s, indent + "  ", v.markers_conv);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_ODOMSTATUS_H
