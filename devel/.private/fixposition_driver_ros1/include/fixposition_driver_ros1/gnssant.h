// Generated by gencpp from file fixposition_driver_ros1/gnssant.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_GNSSANT_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_GNSSANT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct gnssant_
{
  typedef gnssant_<ContainerAllocator> Type;

  gnssant_()
    : header()
    , gnss1_state()
    , gnss1_power()
    , gnss1_age(0)
    , gnss2_state()
    , gnss2_power()
    , gnss2_age(0)  {
    }
  gnssant_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gnss1_state(_alloc)
    , gnss1_power(_alloc)
    , gnss1_age(0)
    , gnss2_state(_alloc)
    , gnss2_power(_alloc)
    , gnss2_age(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gnss1_state_type;
  _gnss1_state_type gnss1_state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gnss1_power_type;
  _gnss1_power_type gnss1_power;

   typedef int32_t _gnss1_age_type;
  _gnss1_age_type gnss1_age;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gnss2_state_type;
  _gnss2_state_type gnss2_state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gnss2_power_type;
  _gnss2_power_type gnss2_power;

   typedef int32_t _gnss2_age_type;
  _gnss2_age_type gnss2_age;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> const> ConstPtr;

}; // struct gnssant_

typedef ::fixposition_driver_ros1::gnssant_<std::allocator<void> > gnssant;

typedef boost::shared_ptr< ::fixposition_driver_ros1::gnssant > gnssantPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::gnssant const> gnssantConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::gnssant_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::gnssant_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gnssant_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gnss1_state == rhs.gnss1_state &&
    lhs.gnss1_power == rhs.gnss1_power &&
    lhs.gnss1_age == rhs.gnss1_age &&
    lhs.gnss2_state == rhs.gnss2_state &&
    lhs.gnss2_power == rhs.gnss2_power &&
    lhs.gnss2_age == rhs.gnss2_age;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::gnssant_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gnssant_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3efa4edf5957d49615254580afca41bd";
  }

  static const char* value(const ::fixposition_driver_ros1::gnssant_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3efa4edf5957d496ULL;
  static const uint64_t static_value2 = 0x15254580afca41bdULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/gnssant";
  }

  static const char* value(const ::fixposition_driver_ros1::gnssant_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition FP_A-GNSSANT Message\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"Header header\n"
"string gnss1_state   # GNSS1 antenna state\n"
"string gnss1_power   # GNSS1 antenna power\n"
"int32  gnss1_age     # Time since gnss1_state or gnss1_power information last changed\n"
"string gnss2_state   # GNSS2 antenna state\n"
"string gnss2_power   # GNSS2 antenna power\n"
"int32  gnss2_age     # Time since gnss2_state or gnss2_power information last changed\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::gnssant_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gnss1_state);
      stream.next(m.gnss1_power);
      stream.next(m.gnss1_age);
      stream.next(m.gnss2_state);
      stream.next(m.gnss2_power);
      stream.next(m.gnss2_age);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gnssant_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::gnssant_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::gnssant_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gnss1_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gnss1_state);
    s << indent << "gnss1_power: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gnss1_power);
    s << indent << "gnss1_age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gnss1_age);
    s << indent << "gnss2_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gnss2_state);
    s << indent << "gnss2_power: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gnss2_power);
    s << indent << "gnss2_age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gnss2_age);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_GNSSANT_H
