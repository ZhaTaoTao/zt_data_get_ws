// Generated by gencpp from file fixposition_driver_ros1/gxgsv.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_GXGSV_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_GXGSV_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct gxgsv_
{
  typedef gxgsv_<ContainerAllocator> Type;

  gxgsv_()
    : sentences(0)
    , sent_num(0)
    , num_sats(0)
    , sat_id()
    , elev()
    , azim()
    , cno()
    , signal_id()  {
    }
  gxgsv_(const ContainerAllocator& _alloc)
    : sentences(0)
    , sent_num(0)
    , num_sats(0)
    , sat_id(_alloc)
    , elev(_alloc)
    , azim(_alloc)
    , cno(_alloc)
    , signal_id(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _sentences_type;
  _sentences_type sentences;

   typedef int16_t _sent_num_type;
  _sent_num_type sent_num;

   typedef int32_t _num_sats_type;
  _num_sats_type num_sats;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _sat_id_type;
  _sat_id_type sat_id;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _elev_type;
  _elev_type elev;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _azim_type;
  _azim_type azim;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _cno_type;
  _cno_type cno;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _signal_id_type;
  _signal_id_type signal_id;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> const> ConstPtr;

}; // struct gxgsv_

typedef ::fixposition_driver_ros1::gxgsv_<std::allocator<void> > gxgsv;

typedef boost::shared_ptr< ::fixposition_driver_ros1::gxgsv > gxgsvPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::gxgsv const> gxgsvConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::gxgsv_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gxgsv_<ContainerAllocator2> & rhs)
{
  return lhs.sentences == rhs.sentences &&
    lhs.sent_num == rhs.sent_num &&
    lhs.num_sats == rhs.num_sats &&
    lhs.sat_id == rhs.sat_id &&
    lhs.elev == rhs.elev &&
    lhs.azim == rhs.azim &&
    lhs.cno == rhs.cno &&
    lhs.signal_id == rhs.signal_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::gxgsv_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gxgsv_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c19e5f5ab3c6892027710db5940fb01";
  }

  static const char* value(const ::fixposition_driver_ros1::gxgsv_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c19e5f5ab3c6892ULL;
  static const uint64_t static_value2 = 0x027710db5940fb01ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/gxgsv";
  }

  static const char* value(const ::fixposition_driver_ros1::gxgsv_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition NMEA-GX-GSV Message\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"# Format | Field     | Unit    | Description\n"
"# -------|-----------|---------|-------------------------------------|\n"
"int16      sentences # [-]     | Total number of sentences (1 to 9).\n"
"int16      sent_num  # [-]     | Sentence number (1 to 9).\n"
"int32      num_sats  # [-]     | Total number of satellites in view.\n"
"int16[]    sat_id    # [-]     | Satellite ID number.               \n"
"int16[]    elev      # [deg]   | Satellite elevation. \n"
"int16[]    azim      # [deg]   | Satellite azimuth from true North.\n"
"int16[]    cno       # [db-Hz] | Satellite SNR (C/No).\n"
"string     signal_id # [Hex]   | Signal ID (see below).\n"
"\n"
"# Signal ID table\n"
"#\n"
"# | ID | Signal                        |\n"
"# |----|-------------------------------|\n"
"# |  0 | No signal (any talker ID)     |\n"
"# |  1 | GPS/SBAS L1C/A (talker ID GP) |\n"
"# |  6 | GPS L2C-L (talker ID GP)      |\n"
"# |  7 | Galileo L1-BC (talker ID GA)  |\n"
"# |  2 | Galileo E5b (talker ID GA)    |\n"
"# |  1 | BeiDou B1I (talker ID GB)     |\n"
"# |  B | BeiDou B2I (talker ID GB)     |\n"
"# |  1 | GLONASS G1 C/A (talker ID GL) |\n"
"# |  3 | GLONASS G2 C/A (talker ID GL) |\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::gxgsv_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sentences);
      stream.next(m.sent_num);
      stream.next(m.num_sats);
      stream.next(m.sat_id);
      stream.next(m.elev);
      stream.next(m.azim);
      stream.next(m.cno);
      stream.next(m.signal_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gxgsv_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::gxgsv_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::gxgsv_<ContainerAllocator>& v)
  {
    s << indent << "sentences: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sentences);
    s << indent << "sent_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sent_num);
    s << indent << "num_sats: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_sats);
    s << indent << "sat_id[]" << std::endl;
    for (size_t i = 0; i < v.sat_id.size(); ++i)
    {
      s << indent << "  sat_id[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.sat_id[i]);
    }
    s << indent << "elev[]" << std::endl;
    for (size_t i = 0; i < v.elev.size(); ++i)
    {
      s << indent << "  elev[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.elev[i]);
    }
    s << indent << "azim[]" << std::endl;
    for (size_t i = 0; i < v.azim.size(); ++i)
    {
      s << indent << "  azim[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.azim[i]);
    }
    s << indent << "cno[]" << std::endl;
    for (size_t i = 0; i < v.cno.size(); ++i)
    {
      s << indent << "  cno[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.cno[i]);
    }
    s << indent << "signal_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.signal_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_GXGSV_H
