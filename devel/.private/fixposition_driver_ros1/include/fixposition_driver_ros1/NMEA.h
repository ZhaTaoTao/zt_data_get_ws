// Generated by gencpp from file fixposition_driver_ros1/NMEA.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_NMEA_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_NMEA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <fixposition_driver_ros1/GnssSats.h>

namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct NMEA_
{
  typedef NMEA_<ContainerAllocator> Type;

  NMEA_()
    : header()
    , time()
    , date()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , quality(0)
    , num_sv(0)
    , ids()
    , hdop_rec(0.0)
    , pdop(0.0)
    , hdop(0.0)
    , vdop(0.0)
    , rms_range(0.0)
    , std_major(0.0)
    , std_minor(0.0)
    , angle_major(0.0)
    , std_lat(0.0)
    , std_lon(0.0)
    , std_alt(0.0)
    , covariance()
    , cov_type(0)
    , heading(0.0)
    , speed(0.0)
    , course(0.0)
    , diff_age(0.0)
    , diff_sta()
    , gnss_sats()  {
      covariance.assign(0.0);
  }
  NMEA_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(_alloc)
    , date(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , quality(0)
    , num_sv(0)
    , ids(_alloc)
    , hdop_rec(0.0)
    , pdop(0.0)
    , hdop(0.0)
    , vdop(0.0)
    , rms_range(0.0)
    , std_major(0.0)
    , std_minor(0.0)
    , angle_major(0.0)
    , std_lat(0.0)
    , std_lon(0.0)
    , std_alt(0.0)
    , covariance()
    , cov_type(0)
    , heading(0.0)
    , speed(0.0)
    , course(0.0)
    , diff_age(0.0)
    , diff_sta(_alloc)
    , gnss_sats(_alloc)  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _time_type;
  _time_type time;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _date_type;
  _date_type date;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef int8_t _quality_type;
  _quality_type quality;

   typedef int8_t _num_sv_type;
  _num_sv_type num_sv;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _ids_type;
  _ids_type ids;

   typedef double _hdop_rec_type;
  _hdop_rec_type hdop_rec;

   typedef double _pdop_type;
  _pdop_type pdop;

   typedef double _hdop_type;
  _hdop_type hdop;

   typedef double _vdop_type;
  _vdop_type vdop;

   typedef double _rms_range_type;
  _rms_range_type rms_range;

   typedef double _std_major_type;
  _std_major_type std_major;

   typedef double _std_minor_type;
  _std_minor_type std_minor;

   typedef double _angle_major_type;
  _angle_major_type angle_major;

   typedef double _std_lat_type;
  _std_lat_type std_lat;

   typedef double _std_lon_type;
  _std_lon_type std_lon;

   typedef double _std_alt_type;
  _std_alt_type std_alt;

   typedef boost::array<double, 9>  _covariance_type;
  _covariance_type covariance;

   typedef int8_t _cov_type_type;
  _cov_type_type cov_type;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _course_type;
  _course_type course;

   typedef double _diff_age_type;
  _diff_age_type diff_age;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _diff_sta_type;
  _diff_sta_type diff_sta;

   typedef std::vector< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> >> _gnss_sats_type;
  _gnss_sats_type gnss_sats;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> const> ConstPtr;

}; // struct NMEA_

typedef ::fixposition_driver_ros1::NMEA_<std::allocator<void> > NMEA;

typedef boost::shared_ptr< ::fixposition_driver_ros1::NMEA > NMEAPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::NMEA const> NMEAConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::NMEA_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::NMEA_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::NMEA_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.date == rhs.date &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.quality == rhs.quality &&
    lhs.num_sv == rhs.num_sv &&
    lhs.ids == rhs.ids &&
    lhs.hdop_rec == rhs.hdop_rec &&
    lhs.pdop == rhs.pdop &&
    lhs.hdop == rhs.hdop &&
    lhs.vdop == rhs.vdop &&
    lhs.rms_range == rhs.rms_range &&
    lhs.std_major == rhs.std_major &&
    lhs.std_minor == rhs.std_minor &&
    lhs.angle_major == rhs.angle_major &&
    lhs.std_lat == rhs.std_lat &&
    lhs.std_lon == rhs.std_lon &&
    lhs.std_alt == rhs.std_alt &&
    lhs.covariance == rhs.covariance &&
    lhs.cov_type == rhs.cov_type &&
    lhs.heading == rhs.heading &&
    lhs.speed == rhs.speed &&
    lhs.course == rhs.course &&
    lhs.diff_age == rhs.diff_age &&
    lhs.diff_sta == rhs.diff_sta &&
    lhs.gnss_sats == rhs.gnss_sats;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::NMEA_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::NMEA_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec17f8d2bc98980ffc7004f565692fa0";
  }

  static const char* value(const ::fixposition_driver_ros1::NMEA_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec17f8d2bc98980fULL;
  static const uint64_t static_value2 = 0xfc7004f565692fa0ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/NMEA";
  }

  static const char* value(const ::fixposition_driver_ros1::NMEA_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition NMEA Message. Specified using the WGS 84 reference ellipsoid.\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"# Format  | Field       | Unit              | Description\n"
"# --------|-------------|-------------------|----------------------------------------------------------------------|\n"
"Header      header      # [ns]              | Specifies the ROS time and Euclidian reference frame.\n"
"string      time        # [hhmmss.ss(ss)]   | UTC time (hours, minutes and seconds).\n"
"string      date        # [ddmmyy]          | UTC date (day, month and year).\n"
"float64     latitude    # [ddmm.mmmmm(mm)]  | Latitude. Positive is north of equator; negative is south.\n"
"float64     longitude   # [dddmm.mmmmm(mm)] | Longitude. Positive is east of prime meridian; negative is west.\n"
"float64     altitude    # [m]               | Altitude. Positive is above the WGS 84 ellipsoid.\n"
"int8        quality     # [-]               | Quality indicator (see below).\n"
"int8        num_sv      # [-]               | Number of satellites. Strict NMEA: 00-12. High-precision NMEA: 00-99.\n"
"int8[]      ids         # [-]               | ID numbers of satellites used in solution. See the NMEA 0183 version 4.11 standard document.\n"
"float64     hdop_rec    # [0.10-99.99]      | Horizontal dilution of precision.\n"
"float64     pdop        # [-]               | Position dillution of precision.\n"
"float64     hdop        # [-]               | Horizontal dillution of precision.\n"
"float64     vdop        # [-]               | Vertical dillution of precision.\n"
"float64     rms_range   # [-]               | RMS value of the standard deviation of the range inputs to the navigation process.\n"
"float64     std_major   # [m]               | Standard deviation of semi-major axis of error ellipse.\n"
"float64     std_minor   # [m]               | Standard deviation of semi-minor axis of error ellipse.\n"
"float64     angle_major # [deg]             | Angle of semi-major axis of error ellipse from true North.\n"
"float64     std_lat     # [m]               | Standard deviation of latitude error.\n"
"float64     std_lon     # [m]               | Standard deviation of longitude error.\n"
"float64     std_alt     # [m]               | Standard deviation of altitude error.\n"
"float64[9]  covariance  # [m2]              | Position covariance defined relative to a tangential plane (ENU frame).\n"
"int8        cov_type    # [-]               | Method employed to estimate covariance (see below).\n"
"float64     heading     # [deg]             | True heading.\n"
"float64     speed       # [m/s]             | Speed over ground.\n"
"float64     course      # [deg]             | Course over ground (w.r.t. True North).\n"
"float64     diff_age    # [-]               | Approximate age of differential data (last GPS MSM message received).\n"
"string      diff_sta    # [-]               | DGPS station ID (0000-1023).\n"
"fixposition_driver_ros1/GnssSats[] gnss_sats # [-]| GNSS satellite signal statistics.\n"
"\n"
"# Quality indicator table\n"
"#\n"
"# | ID | Signal         |\n"
"# |----|----------------|\n"
"# |  0 | Invalid        |\n"
"# |  1 | Non-RTK fix    |\n"
"# |  4 | RTK fixed      |\n"
"# |  5 | RTK float      |\n"
"# |  6 | Dead-reckoning |\n"
"\n"
"\n"
"# Covariance type table\n"
"#\n"
"# | ID | Signal         |\n"
"# |----|----------------|\n"
"# |  0 | Unknown        |\n"
"# |  1 | Approximated   |\n"
"# |  2 | Diagonal known |\n"
"# |  3 | Known          |\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: fixposition_driver_ros1/GnssSats\n"
"####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition GNSS satellite signal statistics message.\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"# Format | Field         | Unit    | Description\n"
"# -------|---------------|---------|------------------------------------|\n"
"string     constellation # [Hex]   | Signal ID (see below).\n"
"int16[]    sat_id        # [-]     | Satellite ID number.\n"
"int16[]    azim          # [deg]   | Satellite azimuth from true North.\n"
"int16[]    elev          # [deg]   | Satellite elevation.\n"
"int16[]    cno_l1        # [db-Hz] | Satellite SNR (C/No) for L1-band.\n"
"int16[]    cno_l2        # [db-Hz] | Satellite SNR (C/No) for L2-band.\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::NMEA_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.date);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.quality);
      stream.next(m.num_sv);
      stream.next(m.ids);
      stream.next(m.hdop_rec);
      stream.next(m.pdop);
      stream.next(m.hdop);
      stream.next(m.vdop);
      stream.next(m.rms_range);
      stream.next(m.std_major);
      stream.next(m.std_minor);
      stream.next(m.angle_major);
      stream.next(m.std_lat);
      stream.next(m.std_lon);
      stream.next(m.std_alt);
      stream.next(m.covariance);
      stream.next(m.cov_type);
      stream.next(m.heading);
      stream.next(m.speed);
      stream.next(m.course);
      stream.next(m.diff_age);
      stream.next(m.diff_sta);
      stream.next(m.gnss_sats);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NMEA_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::NMEA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::NMEA_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.time);
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.date);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "quality: ";
    Printer<int8_t>::stream(s, indent + "  ", v.quality);
    s << indent << "num_sv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.num_sv);
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.ids[i]);
    }
    s << indent << "hdop_rec: ";
    Printer<double>::stream(s, indent + "  ", v.hdop_rec);
    s << indent << "pdop: ";
    Printer<double>::stream(s, indent + "  ", v.pdop);
    s << indent << "hdop: ";
    Printer<double>::stream(s, indent + "  ", v.hdop);
    s << indent << "vdop: ";
    Printer<double>::stream(s, indent + "  ", v.vdop);
    s << indent << "rms_range: ";
    Printer<double>::stream(s, indent + "  ", v.rms_range);
    s << indent << "std_major: ";
    Printer<double>::stream(s, indent + "  ", v.std_major);
    s << indent << "std_minor: ";
    Printer<double>::stream(s, indent + "  ", v.std_minor);
    s << indent << "angle_major: ";
    Printer<double>::stream(s, indent + "  ", v.angle_major);
    s << indent << "std_lat: ";
    Printer<double>::stream(s, indent + "  ", v.std_lat);
    s << indent << "std_lon: ";
    Printer<double>::stream(s, indent + "  ", v.std_lon);
    s << indent << "std_alt: ";
    Printer<double>::stream(s, indent + "  ", v.std_alt);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "cov_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cov_type);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "course: ";
    Printer<double>::stream(s, indent + "  ", v.course);
    s << indent << "diff_age: ";
    Printer<double>::stream(s, indent + "  ", v.diff_age);
    s << indent << "diff_sta: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.diff_sta);
    s << indent << "gnss_sats[]" << std::endl;
    for (size_t i = 0; i < v.gnss_sats.size(); ++i)
    {
      s << indent << "  gnss_sats[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> >::stream(s, indent + "    ", v.gnss_sats[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_NMEA_H
