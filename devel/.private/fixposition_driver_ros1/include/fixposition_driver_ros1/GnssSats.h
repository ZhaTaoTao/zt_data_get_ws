// Generated by gencpp from file fixposition_driver_ros1/GnssSats.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_GNSSSATS_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_GNSSSATS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct GnssSats_
{
  typedef GnssSats_<ContainerAllocator> Type;

  GnssSats_()
    : constellation()
    , sat_id()
    , azim()
    , elev()
    , cno_l1()
    , cno_l2()  {
    }
  GnssSats_(const ContainerAllocator& _alloc)
    : constellation(_alloc)
    , sat_id(_alloc)
    , azim(_alloc)
    , elev(_alloc)
    , cno_l1(_alloc)
    , cno_l2(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _constellation_type;
  _constellation_type constellation;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _sat_id_type;
  _sat_id_type sat_id;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _azim_type;
  _azim_type azim;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _elev_type;
  _elev_type elev;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _cno_l1_type;
  _cno_l1_type cno_l1;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _cno_l2_type;
  _cno_l2_type cno_l2;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> const> ConstPtr;

}; // struct GnssSats_

typedef ::fixposition_driver_ros1::GnssSats_<std::allocator<void> > GnssSats;

typedef boost::shared_ptr< ::fixposition_driver_ros1::GnssSats > GnssSatsPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::GnssSats const> GnssSatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::GnssSats_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::GnssSats_<ContainerAllocator2> & rhs)
{
  return lhs.constellation == rhs.constellation &&
    lhs.sat_id == rhs.sat_id &&
    lhs.azim == rhs.azim &&
    lhs.elev == rhs.elev &&
    lhs.cno_l1 == rhs.cno_l1 &&
    lhs.cno_l2 == rhs.cno_l2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::GnssSats_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::GnssSats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "048fb6a4e516eca717a91a2a5ccba58b";
  }

  static const char* value(const ::fixposition_driver_ros1::GnssSats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x048fb6a4e516eca7ULL;
  static const uint64_t static_value2 = 0x17a91a2a5ccba58bULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/GnssSats";
  }

  static const char* value(const ::fixposition_driver_ros1::GnssSats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition GNSS satellite signal statistics message.\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"# Format | Field         | Unit    | Description\n"
"# -------|---------------|---------|------------------------------------|\n"
"string     constellation # [Hex]   | Signal ID (see below).\n"
"int16[]    sat_id        # [-]     | Satellite ID number.\n"
"int16[]    azim          # [deg]   | Satellite azimuth from true North.\n"
"int16[]    elev          # [deg]   | Satellite elevation.\n"
"int16[]    cno_l1        # [db-Hz] | Satellite SNR (C/No) for L1-band.\n"
"int16[]    cno_l2        # [db-Hz] | Satellite SNR (C/No) for L2-band.\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::GnssSats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.constellation);
      stream.next(m.sat_id);
      stream.next(m.azim);
      stream.next(m.elev);
      stream.next(m.cno_l1);
      stream.next(m.cno_l2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssSats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::GnssSats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::GnssSats_<ContainerAllocator>& v)
  {
    s << indent << "constellation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.constellation);
    s << indent << "sat_id[]" << std::endl;
    for (size_t i = 0; i < v.sat_id.size(); ++i)
    {
      s << indent << "  sat_id[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.sat_id[i]);
    }
    s << indent << "azim[]" << std::endl;
    for (size_t i = 0; i < v.azim.size(); ++i)
    {
      s << indent << "  azim[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.azim[i]);
    }
    s << indent << "elev[]" << std::endl;
    for (size_t i = 0; i < v.elev.size(); ++i)
    {
      s << indent << "  elev[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.elev[i]);
    }
    s << indent << "cno_l1[]" << std::endl;
    for (size_t i = 0; i < v.cno_l1.size(); ++i)
    {
      s << indent << "  cno_l1[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.cno_l1[i]);
    }
    s << indent << "cno_l2[]" << std::endl;
    for (size_t i = 0; i < v.cno_l2.size(); ++i)
    {
      s << indent << "  cno_l2[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.cno_l2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_GNSSSATS_H
