// Generated by gencpp from file fixposition_driver_ros1/gngsa.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_ROS1_MESSAGE_GNGSA_H
#define FIXPOSITION_DRIVER_ROS1_MESSAGE_GNGSA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fixposition_driver_ros1
{
template <class ContainerAllocator>
struct gngsa_
{
  typedef gngsa_<ContainerAllocator> Type;

  gngsa_()
    : mode_op(0)
    , mode_nav(0)
    , ids()
    , pdop(0.0)
    , hdop(0.0)
    , vdop(0.0)
    , gnss_id(0)  {
    }
  gngsa_(const ContainerAllocator& _alloc)
    : mode_op(0)
    , mode_nav(0)
    , ids(_alloc)
    , pdop(0.0)
    , hdop(0.0)
    , vdop(0.0)
    , gnss_id(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_op_type;
  _mode_op_type mode_op;

   typedef int8_t _mode_nav_type;
  _mode_nav_type mode_nav;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _ids_type;
  _ids_type ids;

   typedef double _pdop_type;
  _pdop_type pdop;

   typedef double _hdop_type;
  _hdop_type hdop;

   typedef double _vdop_type;
  _vdop_type vdop;

   typedef int8_t _gnss_id_type;
  _gnss_id_type gnss_id;





  typedef boost::shared_ptr< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> const> ConstPtr;

}; // struct gngsa_

typedef ::fixposition_driver_ros1::gngsa_<std::allocator<void> > gngsa;

typedef boost::shared_ptr< ::fixposition_driver_ros1::gngsa > gngsaPtr;
typedef boost::shared_ptr< ::fixposition_driver_ros1::gngsa const> gngsaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver_ros1::gngsa_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver_ros1::gngsa_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gngsa_<ContainerAllocator2> & rhs)
{
  return lhs.mode_op == rhs.mode_op &&
    lhs.mode_nav == rhs.mode_nav &&
    lhs.ids == rhs.ids &&
    lhs.pdop == rhs.pdop &&
    lhs.hdop == rhs.hdop &&
    lhs.vdop == rhs.vdop &&
    lhs.gnss_id == rhs.gnss_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver_ros1::gngsa_<ContainerAllocator1> & lhs, const ::fixposition_driver_ros1::gngsa_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e04c2fa8cea888c64fc400d41a1a650";
  }

  static const char* value(const ::fixposition_driver_ros1::gngsa_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e04c2fa8cea888cULL;
  static const uint64_t static_value2 = 0x64fc400d41a1a650ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver_ros1/gngsa";
  }

  static const char* value(const ::fixposition_driver_ros1::gngsa_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2023  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Fixposition NMEA-GN-GSA Message\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"# Format | Field    | Unit | Description\n"
"# -------|----------|------|----------------------------------------------------------------------------------------------|\n"
"char       mode_op  #  [-] | Operation mode: always A (automatic, allowed to automatically switch 2D/3D).\n"
"int8       mode_nav #  [-] | Navigation mode: 1 (fix not available), 2 (2D) or 3 (3D).\n"
"int8[]     ids      #  [-] | ID numbers of satellites used in solution. See the NMEA 0183 version 4.11 standard document.\n"
"float64    pdop     #  [-] | Position dillution of precision.\n"
"float64    hdop     #  [-] | Horizontal dillution of precision.\n"
"float64    vdop     #  [-] | Vertical dillution of precision.\n"
"int8       gnss_id  #  [-] | GNSS system ID: 1 (GPS, SBAS), 2 (GLONASS), 3 (Galileo), 4 (BeiDou), 5 (QZSS).\n"
;
  }

  static const char* value(const ::fixposition_driver_ros1::gngsa_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode_op);
      stream.next(m.mode_nav);
      stream.next(m.ids);
      stream.next(m.pdop);
      stream.next(m.hdop);
      stream.next(m.vdop);
      stream.next(m.gnss_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gngsa_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver_ros1::gngsa_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver_ros1::gngsa_<ContainerAllocator>& v)
  {
    s << indent << "mode_op: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode_op);
    s << indent << "mode_nav: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode_nav);
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.ids[i]);
    }
    s << indent << "pdop: ";
    Printer<double>::stream(s, indent + "  ", v.pdop);
    s << indent << "hdop: ";
    Printer<double>::stream(s, indent + "  ", v.hdop);
    s << indent << "vdop: ";
    Printer<double>::stream(s, indent + "  ", v.vdop);
    s << indent << "gnss_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gnss_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_ROS1_MESSAGE_GNGSA_H
